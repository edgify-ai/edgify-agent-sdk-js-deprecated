// source: config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AgentConfig', null, global);
goog.exportSymbol('proto.AnalyticsConfig', null, global);
goog.exportSymbol('proto.ApiConfig', null, global);
goog.exportSymbol('proto.Config', null, global);
goog.exportSymbol('proto.DataManagerConfig', null, global);
goog.exportSymbol('proto.DatabaseConfig', null, global);
goog.exportSymbol('proto.DeviceManagerConfig', null, global);
goog.exportSymbol('proto.GetConfigRequest', null, global);
goog.exportSymbol('proto.GetConfigResponse', null, global);
goog.exportSymbol('proto.PredictorConfig', null, global);
goog.exportSymbol('proto.RestartRequest', null, global);
goog.exportSymbol('proto.RestartResponse', null, global);
goog.exportSymbol('proto.SetConfigRequest', null, global);
goog.exportSymbol('proto.SetConfigResponse', null, global);
goog.exportSymbol('proto.VideoStreamConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AgentConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AgentConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AgentConfig.displayName = 'proto.AgentConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApiConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApiConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ApiConfig.displayName = 'proto.ApiConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DatabaseConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DatabaseConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DatabaseConfig.displayName = 'proto.DatabaseConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataManagerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DataManagerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataManagerConfig.displayName = 'proto.DataManagerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VideoStreamConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VideoStreamConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VideoStreamConfig.displayName = 'proto.VideoStreamConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnalyticsConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AnalyticsConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AnalyticsConfig.displayName = 'proto.AnalyticsConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PredictorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PredictorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PredictorConfig.displayName = 'proto.PredictorConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeviceManagerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeviceManagerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeviceManagerConfig.displayName = 'proto.DeviceManagerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Config.displayName = 'proto.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetConfigRequest.displayName = 'proto.GetConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetConfigResponse.displayName = 'proto.GetConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetConfigRequest.displayName = 'proto.SetConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetConfigResponse.displayName = 'proto.SetConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RestartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RestartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RestartRequest.displayName = 'proto.RestartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RestartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RestartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RestartResponse.displayName = 'proto.RestartResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AgentConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.AgentConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AgentConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    webGrpcEnable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    webGrpcPort: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxMsgSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    grpcPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    logLevel: jspb.Message.getFieldWithDefault(msg, 5, 0),
    webServerPort: jspb.Message.getFieldWithDefault(msg, 6, 0),
    networkMode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    reverseProxyServerPort: jspb.Message.getFieldWithDefault(msg, 8, 0),
    version: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AgentConfig}
 */
proto.AgentConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AgentConfig;
  return proto.AgentConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AgentConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AgentConfig}
 */
proto.AgentConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWebGrpcEnable(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWebGrpcPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxMsgSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrpcPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogLevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWebServerPort(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkMode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReverseProxyServerPort(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AgentConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AgentConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AgentConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWebGrpcEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getWebGrpcPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxMsgSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getGrpcPort();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLogLevel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWebServerPort();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getNetworkMode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReverseProxyServerPort();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional bool web_grpc_enable = 1;
 * @return {boolean}
 */
proto.AgentConfig.prototype.getWebGrpcEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setWebGrpcEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 web_grpc_port = 2;
 * @return {number}
 */
proto.AgentConfig.prototype.getWebGrpcPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setWebGrpcPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_msg_size = 3;
 * @return {number}
 */
proto.AgentConfig.prototype.getMaxMsgSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setMaxMsgSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 grpc_port = 4;
 * @return {number}
 */
proto.AgentConfig.prototype.getGrpcPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setGrpcPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 log_level = 5;
 * @return {number}
 */
proto.AgentConfig.prototype.getLogLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 web_server_port = 6;
 * @return {number}
 */
proto.AgentConfig.prototype.getWebServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setWebServerPort = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string network_mode = 7;
 * @return {string}
 */
proto.AgentConfig.prototype.getNetworkMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setNetworkMode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 reverse_proxy_server_port = 8;
 * @return {number}
 */
proto.AgentConfig.prototype.getReverseProxyServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setReverseProxyServerPort = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string version = 9;
 * @return {string}
 */
proto.AgentConfig.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.AgentConfig} returns this
 */
proto.AgentConfig.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApiConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ApiConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApiConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApiConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
    proxy: jspb.Message.getFieldWithDefault(msg, 4, ""),
    websocketEndpoint: jspb.Message.getFieldWithDefault(msg, 5, ""),
    websocketProtocol: jspb.Message.getFieldWithDefault(msg, 6, ""),
    websocketPath: jspb.Message.getFieldWithDefault(msg, 7, ""),
    websocketReconnectPeriod: jspb.Message.getFieldWithDefault(msg, 8, 0),
    websocketPingPeriod: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApiConfig}
 */
proto.ApiConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApiConfig;
  return proto.ApiConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApiConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApiConfig}
 */
proto.ApiConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProxy(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsocketEndpoint(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsocketProtocol(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsocketPath(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWebsocketReconnectPeriod(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWebsocketPingPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApiConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApiConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApiConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApiConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getProxy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWebsocketEndpoint();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWebsocketProtocol();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWebsocketPath();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWebsocketReconnectPeriod();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getWebsocketPingPeriod();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string base_url = 1;
 * @return {string}
 */
proto.ApiConfig.prototype.getBaseUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setBaseUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.ApiConfig.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 timeout = 3;
 * @return {number}
 */
proto.ApiConfig.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string proxy = 4;
 * @return {string}
 */
proto.ApiConfig.prototype.getProxy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setProxy = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string websocket_endpoint = 5;
 * @return {string}
 */
proto.ApiConfig.prototype.getWebsocketEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setWebsocketEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string websocket_protocol = 6;
 * @return {string}
 */
proto.ApiConfig.prototype.getWebsocketProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setWebsocketProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string websocket_path = 7;
 * @return {string}
 */
proto.ApiConfig.prototype.getWebsocketPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setWebsocketPath = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 websocket_reconnect_period = 8;
 * @return {number}
 */
proto.ApiConfig.prototype.getWebsocketReconnectPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setWebsocketReconnectPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 websocket_ping_period = 9;
 * @return {number}
 */
proto.ApiConfig.prototype.getWebsocketPingPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ApiConfig} returns this
 */
proto.ApiConfig.prototype.setWebsocketPingPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DatabaseConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.DatabaseConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DatabaseConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatabaseConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DatabaseConfig}
 */
proto.DatabaseConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DatabaseConfig;
  return proto.DatabaseConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DatabaseConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DatabaseConfig}
 */
proto.DatabaseConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DatabaseConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DatabaseConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DatabaseConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatabaseConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.DatabaseConfig.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DatabaseConfig} returns this
 */
proto.DatabaseConfig.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataManagerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.DataManagerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataManagerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataManagerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    backendUpdatePeriod: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataManagerConfig}
 */
proto.DataManagerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataManagerConfig;
  return proto.DataManagerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataManagerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataManagerConfig}
 */
proto.DataManagerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBackendUpdatePeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataManagerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataManagerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataManagerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataManagerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBackendUpdatePeriod();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.DataManagerConfig.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataManagerConfig} returns this
 */
proto.DataManagerConfig.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.DataManagerConfig.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataManagerConfig} returns this
 */
proto.DataManagerConfig.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 backend_update_period = 3;
 * @return {number}
 */
proto.DataManagerConfig.prototype.getBackendUpdatePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataManagerConfig} returns this
 */
proto.DataManagerConfig.prototype.setBackendUpdatePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VideoStreamConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.VideoStreamConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VideoStreamConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VideoStreamConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    externalCameraSource: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sleepingIntervalBetweenFrames: jspb.Message.getFieldWithDefault(msg, 4, 0),
    frameWidth: jspb.Message.getFieldWithDefault(msg, 5, 0),
    frameHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    frameRate: jspb.Message.getFieldWithDefault(msg, 7, 0),
    cropEnable: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    cropX1: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cropY1: jspb.Message.getFieldWithDefault(msg, 10, 0),
    cropX2: jspb.Message.getFieldWithDefault(msg, 11, 0),
    cropY2: jspb.Message.getFieldWithDefault(msg, 12, 0),
    framesToGrab: jspb.Message.getFieldWithDefault(msg, 13, 0),
    useReadInsteadOfGrab: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VideoStreamConfig}
 */
proto.VideoStreamConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VideoStreamConfig;
  return proto.VideoStreamConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VideoStreamConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VideoStreamConfig}
 */
proto.VideoStreamConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalCameraSource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSleepingIntervalBetweenFrames(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameRate(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCropEnable(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCropX1(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCropY1(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCropX2(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCropY2(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFramesToGrab(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseReadInsteadOfGrab(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VideoStreamConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VideoStreamConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VideoStreamConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VideoStreamConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getExternalCameraSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSleepingIntervalBetweenFrames();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFrameWidth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFrameHeight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getFrameRate();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCropEnable();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getCropX1();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCropY1();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getCropX2();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getCropY2();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getFramesToGrab();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getUseReadInsteadOfGrab();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.VideoStreamConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 device_id = 2;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getDeviceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string external_camera_source = 3;
 * @return {string}
 */
proto.VideoStreamConfig.prototype.getExternalCameraSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setExternalCameraSource = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 sleeping_interval_between_frames = 4;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getSleepingIntervalBetweenFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setSleepingIntervalBetweenFrames = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 frame_width = 5;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getFrameWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setFrameWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 frame_height = 6;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getFrameHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setFrameHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 frame_rate = 7;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setFrameRate = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool crop_enable = 8;
 * @return {boolean}
 */
proto.VideoStreamConfig.prototype.getCropEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setCropEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 crop_x1 = 9;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getCropX1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setCropX1 = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 crop_y1 = 10;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getCropY1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setCropY1 = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 crop_x2 = 11;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getCropX2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setCropX2 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 crop_y2 = 12;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getCropY2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setCropY2 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 frames_to_grab = 13;
 * @return {number}
 */
proto.VideoStreamConfig.prototype.getFramesToGrab = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setFramesToGrab = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bool use_read_instead_of_grab = 14;
 * @return {boolean}
 */
proto.VideoStreamConfig.prototype.getUseReadInsteadOfGrab = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VideoStreamConfig} returns this
 */
proto.VideoStreamConfig.prototype.setUseReadInsteadOfGrab = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnalyticsConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.AnalyticsConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnalyticsConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnalyticsConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatePeriod: jspb.Message.getFieldWithDefault(msg, 1, 0),
    containersSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxItemsPerNotification: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnalyticsConfig}
 */
proto.AnalyticsConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnalyticsConfig;
  return proto.AnalyticsConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnalyticsConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnalyticsConfig}
 */
proto.AnalyticsConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpdatePeriod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContainersSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxItemsPerNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnalyticsConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnalyticsConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnalyticsConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnalyticsConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatePeriod();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getContainersSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxItemsPerNotification();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 update_period = 1;
 * @return {number}
 */
proto.AnalyticsConfig.prototype.getUpdatePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.AnalyticsConfig} returns this
 */
proto.AnalyticsConfig.prototype.setUpdatePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 containers_size = 2;
 * @return {number}
 */
proto.AnalyticsConfig.prototype.getContainersSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.AnalyticsConfig} returns this
 */
proto.AnalyticsConfig.prototype.setContainersSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_items_per_notification = 3;
 * @return {number}
 */
proto.AnalyticsConfig.prototype.getMaxItemsPerNotification = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AnalyticsConfig} returns this
 */
proto.AnalyticsConfig.prototype.setMaxItemsPerNotification = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PredictorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.PredictorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PredictorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PredictorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    numberOfClassesToShow: jspb.Message.getFieldWithDefault(msg, 1, 0),
    defaultModelPath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    defaultModelConfigPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    defaultModelId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    certaintyEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    top1HighCertaintyThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    minConfidencePerPrediction: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    minConfidenceSum: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    filteringModelPath: jspb.Message.getFieldWithDefault(msg, 9, ""),
    filteringModelConfigPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    filteringModelId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    lookupTablePath: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PredictorConfig}
 */
proto.PredictorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PredictorConfig;
  return proto.PredictorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PredictorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PredictorConfig}
 */
proto.PredictorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumberOfClassesToShow(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultModelPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultModelConfigPath(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultModelId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCertaintyEnabled(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTop1HighCertaintyThreshold(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinConfidencePerPrediction(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinConfidenceSum(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilteringModelPath(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilteringModelConfigPath(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFilteringModelId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLookupTablePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PredictorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PredictorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PredictorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PredictorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumberOfClassesToShow();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDefaultModelPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDefaultModelConfigPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDefaultModelId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCertaintyEnabled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTop1HighCertaintyThreshold();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMinConfidencePerPrediction();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getMinConfidenceSum();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getFilteringModelPath();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFilteringModelConfigPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFilteringModelId();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getLookupTablePath();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional uint32 number_of_classes_to_show = 1;
 * @return {number}
 */
proto.PredictorConfig.prototype.getNumberOfClassesToShow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setNumberOfClassesToShow = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string default_model_path = 2;
 * @return {string}
 */
proto.PredictorConfig.prototype.getDefaultModelPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setDefaultModelPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string default_model_config_path = 3;
 * @return {string}
 */
proto.PredictorConfig.prototype.getDefaultModelConfigPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setDefaultModelConfigPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 default_model_id = 4;
 * @return {number}
 */
proto.PredictorConfig.prototype.getDefaultModelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setDefaultModelId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool certainty_enabled = 5;
 * @return {boolean}
 */
proto.PredictorConfig.prototype.getCertaintyEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setCertaintyEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional double top1_high_certainty_threshold = 6;
 * @return {number}
 */
proto.PredictorConfig.prototype.getTop1HighCertaintyThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setTop1HighCertaintyThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double min_confidence_per_prediction = 7;
 * @return {number}
 */
proto.PredictorConfig.prototype.getMinConfidencePerPrediction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setMinConfidencePerPrediction = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double min_confidence_sum = 8;
 * @return {number}
 */
proto.PredictorConfig.prototype.getMinConfidenceSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setMinConfidenceSum = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional string filtering_model_path = 9;
 * @return {string}
 */
proto.PredictorConfig.prototype.getFilteringModelPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setFilteringModelPath = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string filtering_model_config_path = 10;
 * @return {string}
 */
proto.PredictorConfig.prototype.getFilteringModelConfigPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setFilteringModelConfigPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint32 filtering_model_id = 11;
 * @return {number}
 */
proto.PredictorConfig.prototype.getFilteringModelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setFilteringModelId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string lookup_table_path = 12;
 * @return {string}
 */
proto.PredictorConfig.prototype.getLookupTablePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.PredictorConfig} returns this
 */
proto.PredictorConfig.prototype.setLookupTablePath = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeviceManagerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.DeviceManagerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeviceManagerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceManagerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    localIp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stateUpdatePeriod: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resourcesUpdatePeriod: jspb.Message.getFieldWithDefault(msg, 3, 0),
    workerSharedFolder: jspb.Message.getFieldWithDefault(msg, 4, ""),
    modelsFolder: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeviceManagerConfig}
 */
proto.DeviceManagerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeviceManagerConfig;
  return proto.DeviceManagerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeviceManagerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeviceManagerConfig}
 */
proto.DeviceManagerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStateUpdatePeriod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResourcesUpdatePeriod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerSharedFolder(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelsFolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeviceManagerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeviceManagerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeviceManagerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceManagerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStateUpdatePeriod();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getResourcesUpdatePeriod();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWorkerSharedFolder();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getModelsFolder();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string local_ip = 1;
 * @return {string}
 */
proto.DeviceManagerConfig.prototype.getLocalIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceManagerConfig} returns this
 */
proto.DeviceManagerConfig.prototype.setLocalIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 state_update_period = 2;
 * @return {number}
 */
proto.DeviceManagerConfig.prototype.getStateUpdatePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeviceManagerConfig} returns this
 */
proto.DeviceManagerConfig.prototype.setStateUpdatePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 resources_update_period = 3;
 * @return {number}
 */
proto.DeviceManagerConfig.prototype.getResourcesUpdatePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeviceManagerConfig} returns this
 */
proto.DeviceManagerConfig.prototype.setResourcesUpdatePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string worker_shared_folder = 4;
 * @return {string}
 */
proto.DeviceManagerConfig.prototype.getWorkerSharedFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceManagerConfig} returns this
 */
proto.DeviceManagerConfig.prototype.setWorkerSharedFolder = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string models_folder = 5;
 * @return {string}
 */
proto.DeviceManagerConfig.prototype.getModelsFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceManagerConfig} returns this
 */
proto.DeviceManagerConfig.prototype.setModelsFolder = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    agent: (f = msg.getAgent()) && proto.AgentConfig.toObject(includeInstance, f),
    api: (f = msg.getApi()) && proto.ApiConfig.toObject(includeInstance, f),
    database: (f = msg.getDatabase()) && proto.DatabaseConfig.toObject(includeInstance, f),
    dataManager: (f = msg.getDataManager()) && proto.DataManagerConfig.toObject(includeInstance, f),
    videoStream: (f = msg.getVideoStream()) && proto.VideoStreamConfig.toObject(includeInstance, f),
    analytics: (f = msg.getAnalytics()) && proto.AnalyticsConfig.toObject(includeInstance, f),
    predictor: (f = msg.getPredictor()) && proto.PredictorConfig.toObject(includeInstance, f),
    deviceManager: (f = msg.getDeviceManager()) && proto.DeviceManagerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Config}
 */
proto.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Config;
  return proto.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Config}
 */
proto.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AgentConfig;
      reader.readMessage(value,proto.AgentConfig.deserializeBinaryFromReader);
      msg.setAgent(value);
      break;
    case 2:
      var value = new proto.ApiConfig;
      reader.readMessage(value,proto.ApiConfig.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    case 3:
      var value = new proto.DatabaseConfig;
      reader.readMessage(value,proto.DatabaseConfig.deserializeBinaryFromReader);
      msg.setDatabase(value);
      break;
    case 4:
      var value = new proto.DataManagerConfig;
      reader.readMessage(value,proto.DataManagerConfig.deserializeBinaryFromReader);
      msg.setDataManager(value);
      break;
    case 5:
      var value = new proto.VideoStreamConfig;
      reader.readMessage(value,proto.VideoStreamConfig.deserializeBinaryFromReader);
      msg.setVideoStream(value);
      break;
    case 6:
      var value = new proto.AnalyticsConfig;
      reader.readMessage(value,proto.AnalyticsConfig.deserializeBinaryFromReader);
      msg.setAnalytics(value);
      break;
    case 7:
      var value = new proto.PredictorConfig;
      reader.readMessage(value,proto.PredictorConfig.deserializeBinaryFromReader);
      msg.setPredictor(value);
      break;
    case 8:
      var value = new proto.DeviceManagerConfig;
      reader.readMessage(value,proto.DeviceManagerConfig.deserializeBinaryFromReader);
      msg.setDeviceManager(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AgentConfig.serializeBinaryToWriter
    );
  }
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ApiConfig.serializeBinaryToWriter
    );
  }
  f = message.getDatabase();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DatabaseConfig.serializeBinaryToWriter
    );
  }
  f = message.getDataManager();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DataManagerConfig.serializeBinaryToWriter
    );
  }
  f = message.getVideoStream();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.VideoStreamConfig.serializeBinaryToWriter
    );
  }
  f = message.getAnalytics();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.AnalyticsConfig.serializeBinaryToWriter
    );
  }
  f = message.getPredictor();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PredictorConfig.serializeBinaryToWriter
    );
  }
  f = message.getDeviceManager();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.DeviceManagerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional AgentConfig agent = 1;
 * @return {?proto.AgentConfig}
 */
proto.Config.prototype.getAgent = function() {
  return /** @type{?proto.AgentConfig} */ (
    jspb.Message.getWrapperField(this, proto.AgentConfig, 1));
};


/**
 * @param {?proto.AgentConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setAgent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearAgent = function() {
  return this.setAgent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasAgent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ApiConfig api = 2;
 * @return {?proto.ApiConfig}
 */
proto.Config.prototype.getApi = function() {
  return /** @type{?proto.ApiConfig} */ (
    jspb.Message.getWrapperField(this, proto.ApiConfig, 2));
};


/**
 * @param {?proto.ApiConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setApi = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearApi = function() {
  return this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasApi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DatabaseConfig database = 3;
 * @return {?proto.DatabaseConfig}
 */
proto.Config.prototype.getDatabase = function() {
  return /** @type{?proto.DatabaseConfig} */ (
    jspb.Message.getWrapperField(this, proto.DatabaseConfig, 3));
};


/**
 * @param {?proto.DatabaseConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setDatabase = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearDatabase = function() {
  return this.setDatabase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasDatabase = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataManagerConfig data_manager = 4;
 * @return {?proto.DataManagerConfig}
 */
proto.Config.prototype.getDataManager = function() {
  return /** @type{?proto.DataManagerConfig} */ (
    jspb.Message.getWrapperField(this, proto.DataManagerConfig, 4));
};


/**
 * @param {?proto.DataManagerConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setDataManager = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearDataManager = function() {
  return this.setDataManager(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasDataManager = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional VideoStreamConfig video_stream = 5;
 * @return {?proto.VideoStreamConfig}
 */
proto.Config.prototype.getVideoStream = function() {
  return /** @type{?proto.VideoStreamConfig} */ (
    jspb.Message.getWrapperField(this, proto.VideoStreamConfig, 5));
};


/**
 * @param {?proto.VideoStreamConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setVideoStream = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearVideoStream = function() {
  return this.setVideoStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasVideoStream = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AnalyticsConfig analytics = 6;
 * @return {?proto.AnalyticsConfig}
 */
proto.Config.prototype.getAnalytics = function() {
  return /** @type{?proto.AnalyticsConfig} */ (
    jspb.Message.getWrapperField(this, proto.AnalyticsConfig, 6));
};


/**
 * @param {?proto.AnalyticsConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setAnalytics = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearAnalytics = function() {
  return this.setAnalytics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasAnalytics = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PredictorConfig predictor = 7;
 * @return {?proto.PredictorConfig}
 */
proto.Config.prototype.getPredictor = function() {
  return /** @type{?proto.PredictorConfig} */ (
    jspb.Message.getWrapperField(this, proto.PredictorConfig, 7));
};


/**
 * @param {?proto.PredictorConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setPredictor = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearPredictor = function() {
  return this.setPredictor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasPredictor = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DeviceManagerConfig device_manager = 8;
 * @return {?proto.DeviceManagerConfig}
 */
proto.Config.prototype.getDeviceManager = function() {
  return /** @type{?proto.DeviceManagerConfig} */ (
    jspb.Message.getWrapperField(this, proto.DeviceManagerConfig, 8));
};


/**
 * @param {?proto.DeviceManagerConfig|undefined} value
 * @return {!proto.Config} returns this
*/
proto.Config.prototype.setDeviceManager = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.clearDeviceManager = function() {
  return this.setDeviceManager(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Config.prototype.hasDeviceManager = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetConfigRequest}
 */
proto.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetConfigRequest;
  return proto.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetConfigRequest}
 */
proto.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetConfigResponse}
 */
proto.GetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetConfigResponse;
  return proto.GetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetConfigResponse}
 */
proto.GetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Config;
      reader.readMessage(value,proto.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional Config config = 1;
 * @return {?proto.Config}
 */
proto.GetConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.Config} */ (
    jspb.Message.getWrapperField(this, proto.Config, 1));
};


/**
 * @param {?proto.Config|undefined} value
 * @return {!proto.GetConfigResponse} returns this
*/
proto.GetConfigResponse.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetConfigResponse} returns this
 */
proto.GetConfigResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetConfigRequest}
 */
proto.SetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetConfigRequest;
  return proto.SetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetConfigRequest}
 */
proto.SetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Config;
      reader.readMessage(value,proto.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional Config config = 1;
 * @return {?proto.Config}
 */
proto.SetConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.Config} */ (
    jspb.Message.getWrapperField(this, proto.Config, 1));
};


/**
 * @param {?proto.Config|undefined} value
 * @return {!proto.SetConfigRequest} returns this
*/
proto.SetConfigRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetConfigRequest} returns this
 */
proto.SetConfigRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetConfigResponse}
 */
proto.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetConfigResponse;
  return proto.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetConfigResponse}
 */
proto.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Config;
      reader.readMessage(value,proto.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional Config config = 1;
 * @return {?proto.Config}
 */
proto.SetConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.Config} */ (
    jspb.Message.getWrapperField(this, proto.Config, 1));
};


/**
 * @param {?proto.Config|undefined} value
 * @return {!proto.SetConfigResponse} returns this
*/
proto.SetConfigResponse.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetConfigResponse} returns this
 */
proto.SetConfigResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RestartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RestartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RestartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RestartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RestartRequest}
 */
proto.RestartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RestartRequest;
  return proto.RestartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RestartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RestartRequest}
 */
proto.RestartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RestartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RestartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RestartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RestartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RestartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RestartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RestartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RestartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RestartResponse}
 */
proto.RestartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RestartResponse;
  return proto.RestartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RestartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RestartResponse}
 */
proto.RestartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RestartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RestartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RestartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RestartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto);
